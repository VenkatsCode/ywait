// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delivery.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Delivery_Status int32

const (
	Delivery_NONE       Delivery_Status = 0
	Delivery_AVAILABLE  Delivery_Status = 1
	Delivery_DELIVERING Delivery_Status = 2
)

var Delivery_Status_name = map[int32]string{
	0: "NONE",
	1: "AVAILABLE",
	2: "DELIVERING",
}

var Delivery_Status_value = map[string]int32{
	"NONE":       0,
	"AVAILABLE":  1,
	"DELIVERING": 2,
}

func (x Delivery_Status) String() string {
	return proto.EnumName(Delivery_Status_name, int32(x))
}

func (Delivery_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bf387bcb4e23d880, []int{0, 0}
}

type Delivery struct {
	DeliveryId           string          `protobuf:"bytes,1,opt,name=deliveryId,proto3" json:"deliveryId,omitempty"`
	Location             string          `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Name                 string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string          `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Status               Delivery_Status `protobuf:"varint,5,opt,name=status,proto3,enum=pb.Delivery_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Delivery) Reset()         { *m = Delivery{} }
func (m *Delivery) String() string { return proto.CompactTextString(m) }
func (*Delivery) ProtoMessage()    {}
func (*Delivery) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf387bcb4e23d880, []int{0}
}

func (m *Delivery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Delivery.Unmarshal(m, b)
}
func (m *Delivery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Delivery.Marshal(b, m, deterministic)
}
func (m *Delivery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delivery.Merge(m, src)
}
func (m *Delivery) XXX_Size() int {
	return xxx_messageInfo_Delivery.Size(m)
}
func (m *Delivery) XXX_DiscardUnknown() {
	xxx_messageInfo_Delivery.DiscardUnknown(m)
}

var xxx_messageInfo_Delivery proto.InternalMessageInfo

func (m *Delivery) GetDeliveryId() string {
	if m != nil {
		return m.DeliveryId
	}
	return ""
}

func (m *Delivery) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Delivery) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Delivery) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *Delivery) GetStatus() Delivery_Status {
	if m != nil {
		return m.Status
	}
	return Delivery_NONE
}

func init() {
	proto.RegisterEnum("pb.Delivery_Status", Delivery_Status_name, Delivery_Status_value)
	proto.RegisterType((*Delivery)(nil), "pb.Delivery")
}

func init() { proto.RegisterFile("delivery.proto", fileDescriptor_bf387bcb4e23d880) }

var fileDescriptor_bf387bcb4e23d880 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xd1, 0x6a, 0xf2, 0x40,
	0x10, 0x85, 0x4d, 0x7e, 0x0d, 0x71, 0x7e, 0x1b, 0x65, 0x5a, 0x4a, 0x48, 0xa1, 0x48, 0xae, 0x84,
	0x42, 0x6c, 0xf5, 0x09, 0xa2, 0x86, 0x12, 0x10, 0x2d, 0x11, 0xbc, 0x37, 0x71, 0xd4, 0x40, 0x92,
	0x0d, 0x9b, 0x55, 0xe8, 0x33, 0xf5, 0x65, 0xfa, 0x48, 0xc5, 0x8d, 0x11, 0x5b, 0xa8, 0x17, 0xbd,
	0x9b, 0xf3, 0xcd, 0x99, 0xb3, 0xcb, 0x01, 0x63, 0x4d, 0x49, 0x7c, 0x20, 0xfe, 0xee, 0xe4, 0x9c,
	0x09, 0x86, 0x6a, 0x1e, 0x5a, 0x0f, 0x5b, 0xc6, 0xb6, 0x09, 0xf5, 0x25, 0x09, 0xf7, 0x9b, 0x3e,
	0xa5, 0xb9, 0x38, 0x19, 0xac, 0xff, 0x8c, 0xaf, 0x89, 0x97, 0xc2, 0xfe, 0x54, 0x40, 0x9f, 0x9c,
	0x02, 0xf0, 0x11, 0xa0, 0x0a, 0xf3, 0xd7, 0xa6, 0xd2, 0x55, 0x7a, 0xcd, 0xe0, 0x82, 0xa0, 0x05,
	0x7a, 0xc2, 0xa2, 0x95, 0x88, 0x59, 0x66, 0xaa, 0x72, 0x7b, 0xd6, 0x88, 0x50, 0xcf, 0x56, 0x29,
	0x99, 0xff, 0x24, 0x97, 0x33, 0xde, 0x41, 0x23, 0xdf, 0xb1, 0x8c, 0xcc, 0xba, 0x84, 0xa5, 0xc0,
	0x27, 0xd0, 0x0a, 0xb1, 0x12, 0xfb, 0xc2, 0x6c, 0x74, 0x95, 0x9e, 0x31, 0xb8, 0x75, 0xf2, 0xd0,
	0xa9, 0xfe, 0xe0, 0x2c, 0xe4, 0x2a, 0x38, 0x59, 0xec, 0x17, 0xd0, 0x4a, 0x82, 0x3a, 0xd4, 0x67,
	0xf3, 0x99, 0xd7, 0xa9, 0xe1, 0x0d, 0x34, 0xdd, 0xa5, 0xeb, 0x4f, 0xdd, 0xd1, 0xd4, 0xeb, 0x28,
	0x68, 0x00, 0x4c, 0xbc, 0xa9, 0xbf, 0xf4, 0x02, 0x7f, 0xf6, 0xda, 0x51, 0x07, 0x1f, 0x2a, 0xb4,
	0xab, 0xb8, 0x05, 0xf1, 0x43, 0x1c, 0x11, 0xf6, 0x40, 0x0f, 0x68, 0x1b, 0x17, 0x82, 0x38, 0xb6,
	0x2e, 0xdf, 0xb3, 0xbe, 0x29, 0xbb, 0x86, 0xcf, 0xa0, 0x05, 0x94, 0xb2, 0x03, 0xfd, 0xf0, 0xdd,
	0x3b, 0x65, 0xa7, 0x4e, 0xd5, 0xa9, 0xe3, 0x1d, 0x3b, 0xb5, 0x6b, 0x38, 0x84, 0xd6, 0xdb, 0x3e,
	0x4c, 0xe2, 0x62, 0x37, 0x3f, 0x16, 0x8b, 0xcd, 0xe3, 0x9d, 0x1c, 0xaf, 0x1c, 0x8d, 0xc0, 0x70,
	0xa3, 0x88, 0x72, 0x71, 0x2e, 0xff, 0x17, 0xef, 0x95, 0x8c, 0x31, 0xb4, 0xc7, 0x2c, 0xdb, 0xc4,
	0x3c, 0xfd, 0x7b, 0x48, 0xa8, 0x49, 0x32, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x79, 0x57, 0xa2,
	0x1f, 0x47, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeliveryServiceClient is the client API for DeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeliveryServiceClient interface {
	Register(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*Delivery, error)
	Remove(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*empty.Empty, error)
	//2. filters delivery guys by status, calls Messaging/SendMessage
	PublishOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*empty.Empty, error)
	//5. delivery person accepts delivery, change Delivery status
	//5. calls Order/DeliveringOrder, calls Messaging/SendMessage
	AcceptDelivery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	//8. change status of Delivery to available
	//8. calls Order/DeliveredOrder
	//8. calls Messaging/SendMessage
	ConfirmDelivery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type deliveryServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeliveryServiceClient(cc *grpc.ClientConn) DeliveryServiceClient {
	return &deliveryServiceClient{cc}
}

func (c *deliveryServiceClient) Register(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*Delivery, error) {
	out := new(Delivery)
	err := c.cc.Invoke(ctx, "/pb.DeliveryService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) Remove(ctx context.Context, in *Delivery, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.DeliveryService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) PublishOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.DeliveryService/PublishOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) AcceptDelivery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.DeliveryService/AcceptDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deliveryServiceClient) ConfirmDelivery(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.DeliveryService/ConfirmDelivery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeliveryServiceServer is the server API for DeliveryService service.
type DeliveryServiceServer interface {
	Register(context.Context, *Delivery) (*Delivery, error)
	Remove(context.Context, *Delivery) (*empty.Empty, error)
	//2. filters delivery guys by status, calls Messaging/SendMessage
	PublishOrder(context.Context, *Order) (*empty.Empty, error)
	//5. delivery person accepts delivery, change Delivery status
	//5. calls Order/DeliveringOrder, calls Messaging/SendMessage
	AcceptDelivery(context.Context, *empty.Empty) (*empty.Empty, error)
	//8. change status of Delivery to available
	//8. calls Order/DeliveredOrder
	//8. calls Messaging/SendMessage
	ConfirmDelivery(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedDeliveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeliveryServiceServer struct {
}

func (*UnimplementedDeliveryServiceServer) Register(ctx context.Context, req *Delivery) (*Delivery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedDeliveryServiceServer) Remove(ctx context.Context, req *Delivery) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (*UnimplementedDeliveryServiceServer) PublishOrder(ctx context.Context, req *Order) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOrder not implemented")
}
func (*UnimplementedDeliveryServiceServer) AcceptDelivery(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptDelivery not implemented")
}
func (*UnimplementedDeliveryServiceServer) ConfirmDelivery(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmDelivery not implemented")
}

func RegisterDeliveryServiceServer(s *grpc.Server, srv DeliveryServiceServer) {
	s.RegisterService(&_DeliveryService_serviceDesc, srv)
}

func _DeliveryService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeliveryService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).Register(ctx, req.(*Delivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Delivery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeliveryService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).Remove(ctx, req.(*Delivery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_PublishOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).PublishOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeliveryService/PublishOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).PublishOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_AcceptDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).AcceptDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeliveryService/AcceptDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).AcceptDelivery(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeliveryService_ConfirmDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeliveryServiceServer).ConfirmDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DeliveryService/ConfirmDelivery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeliveryServiceServer).ConfirmDelivery(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeliveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DeliveryService",
	HandlerType: (*DeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _DeliveryService_Register_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DeliveryService_Remove_Handler,
		},
		{
			MethodName: "PublishOrder",
			Handler:    _DeliveryService_PublishOrder_Handler,
		},
		{
			MethodName: "AcceptDelivery",
			Handler:    _DeliveryService_AcceptDelivery_Handler,
		},
		{
			MethodName: "ConfirmDelivery",
			Handler:    _DeliveryService_ConfirmDelivery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "delivery.proto",
}
