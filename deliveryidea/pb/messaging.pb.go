// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messaging.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message_Type int32

const (
	Message_NONE  Message_Type = 0
	Message_EMAIL Message_Type = 1
	Message_TEXT  Message_Type = 2
)

var Message_Type_name = map[int32]string{
	0: "NONE",
	1: "EMAIL",
	2: "TEXT",
}

var Message_Type_value = map[string]int32{
	"NONE":  0,
	"EMAIL": 1,
	"TEXT":  2,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}

func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{0, 0}
}

type Message struct {
	Message              string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Recipient            string       `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Type                 Message_Type `protobuf:"varint,3,opt,name=type,proto3,enum=pb.Message_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_42a1718997f046ec, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Message) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_NONE
}

func init() {
	proto.RegisterEnum("pb.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterType((*Message)(nil), "pb.Message")
}

func init() { proto.RegisterFile("messaging.proto", fileDescriptor_42a1718997f046ec) }

var fileDescriptor_42a1718997f046ec = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0xcf, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92,
	0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x24, 0x95, 0xa6, 0xe9, 0xa7, 0xe6,
	0x16, 0x94, 0x54, 0x42, 0x14, 0x28, 0xf5, 0x31, 0x72, 0xb1, 0xfb, 0x82, 0x35, 0xa5, 0x0a, 0x49,
	0x70, 0xb1, 0x43, 0xf4, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x42, 0x32,
	0x5c, 0x9c, 0x45, 0xa9, 0xc9, 0x99, 0x05, 0x99, 0xa9, 0x79, 0x25, 0x12, 0x4c, 0x60, 0x39, 0x84,
	0x80, 0x90, 0x0a, 0x17, 0x4b, 0x49, 0x65, 0x41, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x9f, 0x91,
	0x80, 0x5e, 0x41, 0x92, 0x1e, 0xd4, 0x48, 0xbd, 0x90, 0xca, 0x82, 0xd4, 0x20, 0xb0, 0xac, 0x92,
	0x2a, 0x17, 0x0b, 0x88, 0x27, 0xc4, 0xc1, 0xc5, 0xe2, 0xe7, 0xef, 0xe7, 0x2a, 0xc0, 0x20, 0xc4,
	0xc9, 0xc5, 0xea, 0xea, 0xeb, 0xe8, 0xe9, 0x23, 0xc0, 0x08, 0x12, 0x0c, 0x71, 0x8d, 0x08, 0x11,
	0x60, 0x32, 0xb2, 0xe7, 0xe2, 0x83, 0x6a, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xd2,
	0xe5, 0x62, 0x09, 0x4e, 0xcd, 0x4b, 0x11, 0xe2, 0x46, 0x32, 0x58, 0x4a, 0x4c, 0x0f, 0xe2, 0x2b,
	0x3d, 0x98, 0xaf, 0xf4, 0x5c, 0x41, 0xbe, 0x52, 0x62, 0x48, 0x62, 0x03, 0x8b, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf6, 0xce, 0x41, 0x9c, 0x0c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageServiceClient interface {
	//3. send message to delivery guys
	//7. send message to customer that order is in transit
	//10. send message to customer that message is delivered
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pb.MessageService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
type MessageServiceServer interface {
	//3. send message to delivery guys
	//7. send message to customer that order is in transit
	//10. send message to customer that message is delivered
	Send(context.Context, *Message) (*empty.Empty, error)
}

// UnimplementedMessageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (*UnimplementedMessageServiceServer) Send(ctx context.Context, req *Message) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MessageService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _MessageService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messaging.proto",
}
